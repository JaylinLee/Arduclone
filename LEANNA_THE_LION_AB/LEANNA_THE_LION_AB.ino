/*
  Siege: http://www.neoretro.games#ab_6
  Arduboy version 1.2
  MADE by Neo Retro Games
  2017 - SHDWWZRD KURONOWACHAN CRIS
  License: MIT : https://opensource.org/licenses/MIT
 
  1.2 - 5/23/2017
	changed how audio state is saved
	changed eeprom.write to eeprom.update
	
*/

#include <EEPROM.h>
#include <SPI.h>
#include <Arduboy2.h>
#include <ArduboyTones.h>

Arduboy2 arduboy;
Sprites sprites;
ArduboyTones sound(arduboy.audio.enabled);

bool SAVE_HIGH_SCORE=true;

#define GAME_ID 6

//define menu states (on main menu)
#define STATE_MENU_INTRO         0 //show group logo
#define STATE_SAVE_HIGH_SCORE    1
#define STATE_TITLE_SCREEN       2 //a button to play, up/down - sound on/off,
#define STATE_STORY_SCREEN       3 //story
#define STATE_GAME_PLAYING       4 //main game playing screen
#define STATE_GAME_OVER          5 //game over text on screen, show score and level reached returns to title screen after a button clicked

#define VERSION "1.2"

/////////////////////////////////////////////////////////////////////////////////
//IMAGES
/////////////////////////////////////////////////////////////////////////////////

const unsigned char PROGMEM neoretrologo2[] =
{
  // width, height,
  64, 64,
  // FRAME 00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x70, 0x70, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x70, 0x77, 0x77, 0x07, 0x00, 0x07, 0x77, 0x77, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x07, 0x07, 0x77, 0x70, 0x70, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x07, 0x00, 0xdc, 0xdc, 0xdc, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x07, 0x00, 0xdc, 0xdc, 0xdc, 0x00, 0x00, 0x70, 0x77, 0x77, 0x07, 0x00, 0x07, 0x77, 0x77, 0x70, 0x00, 0x00,
  0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x77, 0x70, 0x71, 0x01, 0x01, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x07, 0x07, 0x77, 0x70, 0x71, 0x01, 0x01, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x00, 0x00,
  0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x00, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char PROGMEM sound_icon[] =
{
// width, height,
8, 8,
// FRAME 00
0xff, 0x9f, 0x83, 0xf9, 0xcd, 0xc1, 0xff, 0xff,
};

const unsigned char PROGMEM lion_plus_mask[] =
{
  // width, height,
  24, 8,
  // FRAME 00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x28, 0x38, 0x28, 0x38, 0x14, 0x1c, 0x7a, 0x7e, 0x8a, 0xfe, 0x01, 0xff, 0xc0, 0xff,
  0x60, 0x7f, 0x80, 0xff, 0x00, 0xff, 0x70, 0xff, 0xa1, 0xbf, 0x10, 0x1f, 0x20, 0x3f, 0x18, 0x1f, 0x04, 0x07, 0x05, 0x07, 0x02, 0x02, 0x00, 0x00,

  // FRAME 01
  0x00, 0x00, 0x08, 0x08, 0x14, 0x1c, 0x0a, 0x0e, 0x0d, 0x0f, 0x15, 0x1f, 0x0a, 0x0f, 0x10, 0x1f, 0x10, 0x1f, 0x10, 0x1f, 0x08, 0x0f, 0x11, 0x1f,
  0x21, 0x3f, 0x21, 0x3f, 0x21, 0x3f, 0x11, 0x1f, 0x20, 0x3f, 0x40, 0x7f, 0xb0, 0xff, 0x54, 0xdf, 0x55, 0xdf, 0xa6, 0xbe, 0x18, 0x18, 0x00, 0x00,

  // FRAME 02
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x28, 0x38, 0x14, 0x1c, 0x1a, 0x1e, 0x25, 0x3f, 0x40, 0x7f, 0x20, 0x3f,
  0x90, 0x9f, 0x60, 0xff, 0x80, 0xff, 0x41, 0x7f, 0x21, 0x3f, 0x20, 0x3f, 0x40, 0x7f, 0xb8, 0xff, 0x44, 0xc7, 0x45, 0xc7, 0x82, 0x82, 0x00, 0x00,

  // FRAME 03
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x28, 0x38, 0x28, 0x38, 0x28, 0x38, 0x14, 0x1c, 0x14, 0x1c, 0x0a, 0x0e, 0x0a, 0x0e,
  0x31, 0x3f, 0x40, 0x7f, 0x80, 0xff, 0x20, 0xff, 0x51, 0xdf, 0xa0, 0xbf, 0x10, 0x1f, 0x08, 0x0f, 0x04, 0x07, 0x05, 0x07, 0x02, 0x02, 0x00, 0x00,

  // FRAME 04
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x05, 0x07, 0x05, 0x07, 0x0a, 0x0e, 0x0a, 0x0e, 0x14, 0x1c, 0x14, 0x1c, 0x22, 0x3e,
  0x41, 0x7f, 0x81, 0xff, 0x01, 0xff, 0x62, 0xfe, 0xc1, 0xff, 0x81, 0xff, 0xb9, 0xff, 0x2a, 0xee, 0x44, 0xc4, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,

  // FRAME 05
  0x00, 0x00, 0x04, 0x04, 0x1a, 0x1e, 0x2d, 0x3f, 0x2d, 0x3f, 0x26, 0x3f, 0x22, 0x3f, 0x20, 0x3f, 0x10, 0x1f, 0x10, 0x1f, 0x08, 0x0f, 0x11, 0x1f,
  0x21, 0x3f, 0x21, 0x3f, 0x21, 0x3f, 0x11, 0x1f, 0x10, 0x1f, 0x10, 0x1f, 0x20, 0x3f, 0x24, 0x3f, 0x2d, 0x3f, 0x2a, 0x3a, 0x28, 0x38, 0x10, 0x10,
};

const unsigned char PROGMEM adulthuman_plus_mask[] =
{
  // width, height,
  8, 16,
  // FRAME 00
  0x00, 0x00, 0x00, 0x80, 0x00, 0x40, 0x00, 0xc0,
  0x00, 0xf0, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x18, 0x00, 0x09, 0x00, 0x10, 0x00, 0x1f,
  0x00, 0x0f, 0x00, 0x19, 0x00, 0xe2, 0x00, 0x82,

  // FRAME 01
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x00, 0xf0, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0xcf,
  0x00, 0xbf, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x00,

  // FRAME 02
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x40, 0x00, 0xc0,
  0x00, 0xf0, 0x00, 0xb0, 0x00, 0x80, 0x00, 0xe0,
  0x00, 0xc0, 0x00, 0x41, 0x00, 0x20, 0x00, 0x3f,
  0x00, 0x1f, 0x00, 0x0d, 0x00, 0xe8, 0x00, 0x18,

  // FRAME 03
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x00, 0xf0, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x30, 0x00, 0x10, 0x00, 0x20, 0x00, 0x3f,
  0x00, 0x0f, 0x00, 0x39, 0x00, 0xe1, 0x00, 0x80,
};

const unsigned char PROGMEM monkey_plus_mask[] =
{
  // width, height,
  8, 8,
  // FRAME 00
  0x00, 0xc2, 0x00, 0x4c, 0x00, 0x70, 0x00, 0x38,
  0x00, 0x18, 0x00, 0x3e, 0x00, 0x56, 0x00, 0x10,

  // FRAME 01
  0x00, 0x60, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x38,
  0x00, 0x18, 0x00, 0xfc, 0x00, 0x2c, 0x00, 0xc0,

  // FRAME 02
  0x00, 0x00, 0x00, 0x36, 0x00, 0x39, 0x00, 0x38,
  0x00, 0xf8, 0x00, 0x3c, 0x00, 0xcc, 0x00, 0x00,

  // FRAME 03
  0x00, 0x00, 0x00, 0xce, 0x00, 0x70, 0x00, 0x30,
  0x00, 0x78, 0x00, 0x3c, 0x00, 0x4c, 0x00, 0x00,
};

const unsigned char PROGMEM monkeypoo_plus_mask[] =
{
  // width, height,
  16, 8,
  // FRAME 00
  0x00, 0x18, 0x00, 0x5d, 0x00, 0xff, 0x00, 0xf3, 0x00, 0xbb, 0x00, 0xbb, 0x00, 0xbf, 0x00, 0xed,
  0x00, 0x6b, 0x00, 0x7b, 0x00, 0x7b, 0x00, 0x7a, 0x00, 0x3e, 0x00, 0x3c, 0x00, 0x14, 0x00, 0x18,
};

const unsigned char PROGMEM elephant_plus_mask[] =
{
  // width, height,
  32, 32,
  // FRAME 00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x20, 0xe0, 0x10, 0xf0, 0x88, 0xf8, 0x04, 0xfc, 0x04, 0xfc, 0x08, 0xf8, 0x08, 0xf8, 0x30, 0xf0,
  0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1e, 0x1e, 0x21, 0x3f, 0x41, 0x7f, 0x4c, 0x7f, 0x4d, 0x7f, 0x23, 0x3f, 0x10, 0x1f, 0x08, 0x0f, 0xf0, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
  0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x01, 0xff, 0xc1, 0xff, 0x3d, 0x3f, 0x22, 0x3e, 0x44, 0x7c, 0x58, 0x78,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x20, 0xe0, 0x1c, 0xfc, 0x02, 0xfe, 0x01, 0xff, 0xe1, 0xff, 0x10, 0x1f, 0x10, 0x1f, 0x08, 0x0f, 0xcc, 0xcf, 0x30, 0xff, 0x00, 0xff,
  0x00, 0xff, 0x0e, 0xff, 0xf1, 0xf1, 0x3e, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xf8, 0xff, 0xd0, 0xdf, 0x20, 0xff, 0x00, 0xff, 0x0f, 0xff, 0x10, 0xf0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00,

  // FRAME 01
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0xc0, 0x20, 0xe0, 0x40, 0xc0, 0x80, 0x80, 0x60, 0xe0, 0x10, 0xf0, 0x08, 0xf8, 0x44, 0xfc, 0x02, 0xfe, 0x02, 0xfe, 0x04, 0xfc, 0x04, 0xfc, 0x18, 0xf8,
  0x20, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x10, 0x1f, 0x20, 0x3f, 0x27, 0x3f, 0x21, 0x3f, 0x10, 0x1f, 0x08, 0x0f, 0x78, 0x7f, 0x80, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
  0x00, 0xff, 0x00, 0xff, 0x80, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xe0, 0xff, 0x3e, 0x3f, 0x41, 0x7f, 0x8e, 0xfe, 0x70, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x38, 0xf8, 0x07, 0xff, 0x00, 0xff, 0x00, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff,
  0x78, 0x7f, 0x07, 0x07, 0x00, 0x00, 0x01, 0x01, 0xc2, 0xc3, 0x3c, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x80, 0xff, 0x80, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char PROGMEM child_plus_mask[] =
{
  // width, height,
  8, 16,
  // FRAME 00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
  0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00,
  0x4c, 0x7c, 0x2a, 0x3e, 0x5d, 0x7f, 0x41, 0x7f,
  0xe0, 0xff, 0x16, 0xff, 0x75, 0xfd, 0x88, 0x88,

  // FRAME 01
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
  0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00,
  0x00, 0x00, 0x30, 0x30, 0xce, 0xfe, 0x01, 0xff,
  0x40, 0xff, 0xfa, 0xff, 0x05, 0x05, 0x00, 0x00,

  // FRAME 02
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
  0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00,
  0xc6, 0xc6, 0x29, 0xef, 0xbd, 0xff, 0x41, 0x7f,
  0xe0, 0xff, 0x2a, 0xff, 0x89, 0xff, 0x76, 0x76,

  // FRAME 03
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
  0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00,
  0x90, 0xf0, 0x50, 0x70, 0x5e, 0x7e, 0x41, 0x7f,
  0xe0, 0xff, 0x0a, 0xff, 0x75, 0xf5, 0x80, 0x80,
};

const unsigned char PROGMEM elder_plus_mask[] =
{
  // width, height,
  8, 16,
  // FRAME 00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80,
  0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00,
  0x00, 0x00, 0xce, 0xce, 0x31, 0xff, 0x80, 0xff,
  0x00, 0xff, 0x7a, 0xff, 0x03, 0xff, 0xfc, 0xfc,

  // FRAME 01
  0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0xc0,
  0x20, 0xe0, 0x20, 0xe0, 0xc0, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x67, 0x67, 0x98, 0xff, 0x00, 0xff,
  0x40, 0xff, 0xfb, 0xff, 0x02, 0xfe, 0xfe, 0xfe,
};

const unsigned char PROGMEM adult_plus_mask[] =
{
  // width, height,
  8, 16,
  // FRAME 00
  0x80, 0x80, 0x40, 0xc0, 0xa0, 0xe0, 0x30, 0xf0,
  0x08, 0xf8, 0x48, 0xf8, 0xb0, 0xb0, 0x00, 0x00,
  0x25, 0x3d, 0x16, 0x1f, 0x2f, 0x3f, 0x20, 0x3f,
  0x10, 0x1f, 0xe6, 0xff, 0x1d, 0xff, 0x65, 0xe7,

  // FRAME 01
  0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0xf0,
  0x08, 0xf8, 0x48, 0xf8, 0xb0, 0xb0, 0x00, 0x00,
  0x00, 0x00, 0x18, 0x18, 0xe7, 0xff, 0x30, 0xff,
  0x40, 0xff, 0xf2, 0xff, 0x0e, 0x0f, 0x01, 0x01,

  // FRAME 02
  0xc0, 0xc0, 0x20, 0xe0, 0xa0, 0xe0, 0x30, 0xf0,
  0x08, 0xf8, 0x48, 0xf8, 0x70, 0xf0, 0x10, 0xf0,
  0x21, 0xe1, 0xa2, 0xe3, 0x5f, 0x7f, 0x40, 0x7f,
  0x20, 0x3f, 0xf2, 0xff, 0x15, 0xfd, 0xe5, 0xfd,

  // FRAME 03
  0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0xf0,
  0x08, 0xf8, 0xc8, 0xf8, 0xb0, 0xb0, 0x00, 0x00,
  0x48, 0x78, 0x28, 0x38, 0x5f, 0x7f, 0x40, 0x7f,
  0x30, 0x3f, 0xc6, 0xff, 0x1a, 0xfb, 0x61, 0xe1,
};

const unsigned char PROGMEM waterpuddle_plus_mask[] =
{
  // width, height,
  16, 8,
  // FRAME 00
  0x00, 0x78, 0x08, 0x7c, 0x08, 0xfc, 0x04, 0xfe, 0x04, 0xfe, 0x02, 0xff, 0x02, 0xff, 0x02, 0xff,
  0x02, 0xff, 0x02, 0xff, 0x02, 0xff, 0x04, 0xfe, 0x04, 0x7e, 0x04, 0x7e, 0x08, 0x7c, 0x00, 0x3c,
};

const unsigned char PROGMEM truck_plus_mask[] =
{
  // width, height,
  32, 32,
  // FRAME 00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0xc0, 0xa0, 0xe0, 0xd8, 0xf8, 0x24, 0xfc, 0x04, 0xfc, 0x18, 0xf8, 0xe0, 0xe0, 0x80, 0x80, 0x40, 0xc0, 0xa0, 0xe0,
  0xa0, 0xe0, 0xa0, 0xe0, 0xa0, 0xe0, 0x20, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x30, 0xf0, 0x88, 0xf8, 0x94, 0xfc, 0x9a, 0xfe, 0x8d, 0xff, 0x86, 0xff, 0x83, 0xff, 0x92, 0xff, 0xac, 0xff, 0x90, 0xff, 0x80, 0xff, 0x00, 0xff, 0xf9, 0xff, 0x8a, 0xff, 0x8b, 0xff, 0x8b, 0xff,
  0xf3, 0xff, 0x01, 0xff, 0x00, 0xff, 0x40, 0xff, 0x60, 0xff, 0x73, 0xff, 0x74, 0xfc, 0x74, 0xfc, 0x34, 0xfc, 0xd4, 0xfc, 0x08, 0xf8, 0x70, 0xf0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0x33, 0xff, 0x7b, 0xff, 0x7b, 0xff, 0x33, 0xff, 0x07, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0x0f, 0xff, 0x1c, 0xff, 0x1b, 0xff, 0x1b, 0xff, 0x1b, 0xff, 0x1b, 0xff,
  0x1b, 0xff, 0x1c, 0xff, 0x0f, 0xff, 0x07, 0xff, 0x33, 0xff, 0x79, 0xff, 0x79, 0xff, 0x33, 0xff, 0x00, 0xff, 0x88, 0xff, 0x44, 0x7f, 0x2a, 0x3f, 0x14, 0x17, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char PROGMEM zookeeper_plus_mask[] =
{
  // width, height,
  16, 16,
  // FRAME 00
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x80, 0x40, 0xc0, 0x40, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x02, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0x05, 0x07, 0xc9, 0xcf,
  0xb9, 0xff, 0x89, 0xff, 0xc2, 0xff, 0x80, 0xff, 0x81, 0xff, 0x9e, 0xfe, 0x60, 0x60, 0x00, 0x00,
};

const unsigned char PROGMEM cage_plus_mask[] =
{
  // width, height,
  32, 16,
  // FRAME 00
  0x10, 0xf0, 0x10, 0x70, 0x10, 0x70, 0x10, 0xf0, 0x10, 0x70, 0x10, 0x70, 0x10, 0xf0, 0x10, 0x70, 0x10, 0x70, 0x10, 0xf0, 0x20, 0x60, 0x20, 0x60, 0x20, 0xe0, 0x20, 0x60, 0x20, 0x60, 0x20, 0xe0,
  0x20, 0x60, 0x20, 0x60, 0x20, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0x20, 0xe0, 0x20, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xff, 0x00, 0x92, 0x00, 0x92, 0x00, 0xed, 0x00, 0x92, 0x00, 0x92, 0x00, 0xed, 0x00, 0x92, 0x00, 0x92, 0x00, 0xed, 0x00, 0x92, 0x00, 0x92, 0x00, 0xed, 0x00, 0x92, 0x00, 0x92, 0x00, 0xed,
  0x00, 0x92, 0x00, 0x92, 0x00, 0xff, 0xfd, 0xff, 0x79, 0xff, 0x19, 0xff, 0xc0, 0xff, 0xe0, 0xff, 0x4f, 0xff, 0x30, 0xf0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

const unsigned char PROGMEM backgroundfence_plus_mask[] =
{
  // width, height,
  16, 16,
  // FRAME 00
  0x00, 0x24, 0x00, 0xdb, 0x00, 0xff, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24,
  0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24, 0x00, 0x24,
  0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x09, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
  0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01,
};

const unsigned char PROGMEM foregroundfence_plus_mask[] =
{
  // width, height,
  32, 8,
  // FRAME 00
  0x00, 0x53, 0x00, 0xaf, 0x00, 0xbf, 0x00, 0x53, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13,
  0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13, 0x00, 0x13,
};

const unsigned char PROGMEM angledtranqdart_plus_mask[] =
{
  // width, height,
  8, 8,
  // FRAME 00
  0xc0, 0xc0, 0xa0, 0xe0, 0x50, 0x70, 0x2e, 0x3e,
  0x11, 0x1f, 0x12, 0x1e, 0x14, 0x1c, 0x08, 0x08,
};

const unsigned char PROGMEM tranqdart_plus_mask[] =
{
  // width, height,
  8, 8,
  // FRAME 00
  0x08, 0x08, 0x14, 0x1c, 0x14, 0x1c, 0x14, 0x1c,
  0x14, 0x1c, 0x22, 0x3e, 0x2a, 0x3e, 0x14, 0x14,
};

const unsigned char PROGMEM hotsauce_plus_mask[] =
{
// width, height,
8, 8,
// FRAME 00
0x00, 0x00, 0xf8, 0xf8, 0x07, 0xff, 0x70, 0xff, 
0x20, 0xff, 0x70, 0xff, 0x07, 0xff, 0xf8, 0xf8,
};

const unsigned char PROGMEM creators[] =
{
// width, height,
128, 8,
// FRAME 00
0xb8, 0xa8, 0xe8, 0x00, 0xf8, 0x20, 0xf8, 0x00, 0xf8, 0x88, 0x70, 0x00, 0xf8, 0x40, 0xf8, 0x00, 0xf8, 0x40, 0xf8, 0x00, 0xc8, 0xa8, 0x98, 0x00, 0xf8, 0x68, 0xb8, 0x00, 0xf8, 0x88, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x20, 0xd8, 0x00, 0xf8, 0x80, 0xf8, 0x00, 0xf8, 0x68, 0xb8, 0x00, 0xf8, 0x88, 0xf8, 0x00, 0xf8, 0x70, 0xf8, 0x00, 0xf8, 0x88, 0xf8, 0x00, 0xf8, 0x40, 0xf8, 0x00, 0xf8, 0x28, 0xf8, 0x00, 0xf8, 0x88, 0x88, 0x00, 0xf8, 0x20, 0xf8, 0x00, 0xf8, 0x28, 0xf8, 0x00, 0xf8, 0x70, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x88, 0x88, 0x00, 0xf8, 0x68, 0xb8, 0x00, 0x88, 0xf8, 0x88, 0x00, 0xb8, 0xa8, 0xe8,
};



const uint16_t SND_INTRO_MUSIC[] PROGMEM = {
  200,100,
  0,100,
  200,100,
  0,100,
  600,100,
  0,100,
  600,100,
  0,100,
  400,100,
  0,100,
  300,100,
  0,100,
  400,100,
  0,100,
  TONES_END 
};

const uint16_t SND_EATING[] PROGMEM = {
  320,200,
  TONES_END 
};

const uint16_t SND_HUNTER[] PROGMEM = {
  50,100,
  100,500,
  TONES_END 
};

const uint16_t SND_ELEPHANT[] PROGMEM = {
  350,100,
  500,500,
  TONES_END 
};

const uint16_t SND_GAME_OVER[] PROGMEM = {
  600,400,
  0,100,
  350,100,
  TONES_END 
};


/////////////////////////////////////////////////////////////////////////////
//GLOBAL VARIABLES
/////////////////////////////////////////////////////////////////////////////

int8_t gameState;//state the game is in

//player variables and images
struct player_structure {
  public:
    int8_t x = 0;
    int8_t y = 38;
    int8_t row = 38;
    uint8_t frame = 0;
    uint32_t SCORE = 0;
    bool sliding = false;
    int8_t slide_timer = 0;
    int8_t jump = 0;
    int16_t multiplier_timer = 0;
};

player_structure player;

#define ELDER_ENTITY 1
#define CHILD_ENTITY 2
#define ADULT_ENTITY 3
#define MONKEY_ENTITY 4
#define ELEPHANT_ENTITY 5
#define TRANQ_ZOO_KEEPER_ENTITY 6
#define TRANQ_TRUCK_ENTITY 7
#define CAGE_ENTITY 8
#define WATER_PUDDLE_ENTITY 9
#define HOT_SAUCE_ENTITY 10
struct Entity {
  public:
    Point point = {.x = 0, .y = 0};
    bool      Exists = false;
    int8_t    frame = 0;
    int8_t    Type;
    int8_t    row;
    int8_t    width;
    int8_t    creation_timer;
    int8_t    darts = 0;
};
#define TotalEntities 4
Entity entities[TotalEntities];


#define TRANQ_DART 1
#define ANGLED_TRANQ_DART 2
#define MONKEY_POO 3
struct Dart {
  public:
    Point point = {.x = 0, .y = 0};
    bool      Exists = false;
    int8_t    Type;
    int8_t    row;
};
#define TotalDarts 4
Dart darts[TotalDarts];

bool video_out = false;

int frame_counter = 0;
int8_t bg_fence_x = 0;
int8_t fg_fence_x = 0;
int32_t game_timer = 0;
int16_t hotsauce_timer = 3600;

struct high_score_struct{
  uint16_t score;
} ;
high_score_struct high_score_data;

//odds per entity per 15 sec chunk
const unsigned char PROGMEM odds[] =
{
  //count_down_till, entity1, entity2, entity3, entity4, entity5
  //0-15 secs
  120, 0, 0, 0, 0, 0,//entity 0 row 0
  120, ELDER_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, CAGE_ENTITY,//entity 1 row 1
  120, ELDER_ENTITY, ELDER_ENTITY, CHILD_ENTITY, ADULT_ENTITY, CHILD_ENTITY,//entity 2 row 2
  120, ELDER_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, CAGE_ENTITY,//entity 3 row 3
  //16-30 secs
  120, 0, 0, 0, 0, 0,//entity 0 row 0
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, CAGE_ENTITY,//entity 1 row 1
  120, WATER_PUDDLE_ENTITY, CHILD_ENTITY, CHILD_ENTITY, ADULT_ENTITY, ELEPHANT_ENTITY,//entity 2 row 2
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, CAGE_ENTITY,//entity 3 row 3
  //31-45 secs
  120, TRANQ_TRUCK_ENTITY, 0, 0, 0, 0,//entity 0 row 0
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, ADULT_ENTITY, CHILD_ENTITY, ELEPHANT_ENTITY,//entity 1 row 1
  120, WATER_PUDDLE_ENTITY, CHILD_ENTITY, CHILD_ENTITY, ADULT_ENTITY, CAGE_ENTITY,//entity 2 row 2
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, ADULT_ENTITY, CHILD_ENTITY, ELEPHANT_ENTITY,//entity 3 row 3
  //46-60 secs
  120, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, 0, 0, 0,//entity 0 row 0
  120, MONKEY_ENTITY, ELDER_ENTITY, ADULT_ENTITY, CHILD_ENTITY, ELEPHANT_ENTITY,//entity 1 row 1
  120, WATER_PUDDLE_ENTITY, CHILD_ENTITY, CHILD_ENTITY, ADULT_ENTITY, TRANQ_ZOO_KEEPER_ENTITY,//entity 2 row 2
  120, MONKEY_ENTITY, ELDER_ENTITY, ADULT_ENTITY, CHILD_ENTITY, ELEPHANT_ENTITY,//entity 3 row 3
  //61-75 secs
  120, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, 0, 0,//entity 0 row 0
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, TRANQ_ZOO_KEEPER_ENTITY,//entity 1 row 1
  120, MONKEY_ENTITY, CHILD_ENTITY, CHILD_ENTITY, ADULT_ENTITY, ELEPHANT_ENTITY,//entity 2 row 2
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, TRANQ_ZOO_KEEPER_ENTITY,//entity 3 row 3
  //76-90 secs
  120, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, 0,//entity 0 row 0
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, TRANQ_ZOO_KEEPER_ENTITY,//entity 1 row 1
  120, MONKEY_ENTITY, CHILD_ENTITY, ADULT_ENTITY, ELEPHANT_ENTITY, ELEPHANT_ENTITY,//entity 2 row 2
  120, WATER_PUDDLE_ENTITY, ELDER_ENTITY, CHILD_ENTITY, CHILD_ENTITY, TRANQ_ZOO_KEEPER_ENTITY,//entity 3 row 3
  //91-105 secs
  120, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY, TRANQ_TRUCK_ENTITY,//entity 0 row 0
  120, MONKEY_ENTITY, ADULT_ENTITY, CHILD_ENTITY, ELEPHANT_ENTITY, TRANQ_ZOO_KEEPER_ENTITY,//entity 1 row 1
  120, WATER_PUDDLE_ENTITY, ADULT_ENTITY, ADULT_ENTITY, CAGE_ENTITY, CAGE_ENTITY,//entity 2 row 2
  120, MONKEY_ENTITY, ADULT_ENTITY, CHILD_ENTITY, ELEPHANT_ENTITY, TRANQ_ZOO_KEEPER_ENTITY,//entity 3 row 3
};
#define MAX_LEVEL 6

const char hi_score_text[] PROGMEM = "HI SCORE:";
#define TRAMPLED_TEXT 1
#define KNOCKED_OUT_TEXT 2
#define CAGED_TEXT 3
const char trampled_text[] PROGMEM = "TRAMPLED";
const char knocked_out_text[] PROGMEM = "KNOCKED OUT";
const char caged_text[] PROGMEM = "CAGED";
int8_t gameover_type = 0;
int8_t gameover_text_id = 0;
const char gameover1_text[] PROGMEM = "What, no mint?";
const char gameover2_text[] PROGMEM = "All that fast food\nwas worth it.";
const char gameover3_text[] PROGMEM = "Bones can be\ntoothpicks, I suppose.";
const char gameover4_text[] PROGMEM = "I demand to see your\nmanager. I'm sure\nthey'll be delicious.";

const char story_text[] PROGMEM = "Leanna may be a lion,\nbut she knows what\nshe wants: She wants\nfresh meat from her\nfavorite restaurant.\nThe zoo had to close";

void setup() {
  // put your setup code here, to run once:
  if (arduboy.pressed(DOWN_BUTTON)) {//activate video out
    Serial.begin(9600);
    video_out = true;
  }

  arduboy.begin();

  arduboy.initRandomSeed();
  Load();
  if(high_score_data.score==65535){
    high_score_data.score=0;
    Save();
  }
  gameState  = STATE_MENU_INTRO;
}

void game_setup() {
  game_timer = 0;
  for (int8_t i = 0; i < TotalEntities; i++) {
    entities[i].creation_timer = pgm_read_byte(&odds[i * 6]);
    entities[i].row = i;
    entities[i].Type = 0;
    entities[i].Exists = false;
  }
  for (int8_t i = 0; i < TotalDarts; i++) {
    darts[i].Exists = false;
  }
  player.SCORE = 0;
  player.jump = 0;
  player.x = 0;
  player.y = 38;
  player.row = 38;
  player.frame = 0;
  player.sliding = false;
  player.slide_timer = 0;
  player.multiplier_timer = 0;
  hotsauce_timer = 3600;
  gameState = STATE_GAME_PLAYING;
}

void loop() {
  // put your main code here, to run repeatedly:
  if (!(arduboy.nextFrame())) return;
  arduboy.pollButtons();//polls for buttons down, up and clicked
  arduboy.clear();
  int8_t p=0;
  switch (gameState) {
    case STATE_MENU_INTRO:
      sprites.drawSelfMasked(32, 0, neoretrologo2, 0);
      frame_counter++;
      if (frame_counter > 90) {
        frame_counter = 0;
        gameState = SAVE_HIGH_SCORE;
      }
      break;
    case STATE_SAVE_HIGH_SCORE:
      arduboy.setCursor(16,24);
      arduboy.print("SAVE HIGH SCORE?");
      if(SAVE_HIGH_SCORE){
        arduboy.setCursor(55,48);
        arduboy.print("YES");
      }else{
        arduboy.setCursor(58,48);
        arduboy.print("NO");
      }
      if(arduboy.justPressed(UP_BUTTON)){
        SAVE_HIGH_SCORE=true;
      }else if(arduboy.justPressed(DOWN_BUTTON)){
        SAVE_HIGH_SCORE=false;
      }else if (arduboy.justPressed(A_BUTTON) || arduboy.justPressed(B_BUTTON)) {
        gameState = STATE_TITLE_SCREEN;
        sound.tones(SND_INTRO_MUSIC);
      }
      break;
    case STATE_TITLE_SCREEN:
      frame_counter++;
      if(frame_counter>180){
        frame_counter=0;
        gameState = STATE_STORY_SCREEN; 
      }
      if (arduboy.justPressed(UP_BUTTON)){
        arduboy.audio.on(); 
        arduboy.audio.saveOnOff();
        sound.tones(SND_INTRO_MUSIC);  
      }//MOVE UP
      if (arduboy.justPressed(DOWN_BUTTON)){
        arduboy.audio.saveOnOff();
        arduboy.audio.off();
      }//MOVE DOWN
      if(arduboy.justPressed(A_BUTTON)){
        game_setup();
      }
      sprites.drawSelfMasked(0,0,creators,0);
      //game logo
      arduboy.setCursor(20,24);
      arduboy.print("LEANNA THE LION");
      
      //SOUND ON/OFF
      if (arduboy.audio.enabled()){
        sprites.drawSelfMasked(0,56,sound_icon,0);
      }
      //VERSION NUMBER
      arduboy.setCursor(110,56);
      arduboy.print(VERSION);
      //show hi score
      if(high_score_data.score>0){
        arduboy.setCursor(25,40);
        arduboy.print((__FlashStringHelper*)(hi_score_text));
        arduboy.setCursor(79,40);
        arduboy.print(high_score_data.score);
      }
      break;
    case STATE_STORY_SCREEN:  
      if (arduboy.justPressed(A_BUTTON) || arduboy.justPressed(B_BUTTON)){
        frame_counter=0;
        gameState = STATE_TITLE_SCREEN; 
      }
      frame_counter++;
      if(frame_counter>300){
        frame_counter=0;
        gameState = STATE_TITLE_SCREEN; 
      }
      //draw story on the screen 
      arduboy.setCursor(0, 0);
      arduboy.print((__FlashStringHelper*)(story_text)); 
      break; 
    case STATE_GAME_PLAYING:
      game_timer++;
      if(hotsauce_timer>0){hotsauce_timer--;}
      arduboy.fillScreen(WHITE);
      
      bg_fence_x--;
      if (bg_fence_x < -15) {
        bg_fence_x = 0;
      }
      for (int i = 0; i < 9; i++) {
        sprites.drawPlusMask(i * 16 + bg_fence_x, 0, backgroundfence_plus_mask, 0);
      }

      tickEntities(0);

      if (player.sliding) {
        if (player.slide_timer > 0) {
          player.slide_timer--;
        }
        if (player.slide_timer == 0) {
          player.sliding = false;
        }
        player.frame = 4;
      } else {
        if (arduboy.justPressed(UP_BUTTON) && player.jump != 1) { //MOVE UP
          player.row -= 12;
          if (player.row < 26) {
            player.row = 26;
          }
        }
        if (arduboy.justPressed(DOWN_BUTTON) && player.jump != 1) { //MOVE DOWN
          player.row += 12;
          if (player.row > 50) {
            player.row = 50;
          }
        }
        if (arduboy.justPressed(A_BUTTON) && player.jump == 0) {
          player.jump = 1;
        }
        if (player.jump == 1) { //leap forward quickly
          if (player.x < 32) {
            player.x += 2;
          }
          if (player.x == 32) {
            player.jump = 2;
          }
          player.frame = 5;
        } else {
          if (arduboy.everyXFrames(5)) {
            player.frame++;
          }
          if (player.frame > 3) {
            player.frame = 0;
          }
        }
        if (player.jump == 2 && player.x != 0) {
          player.x--;
          if (player.x == 0) {
            player.jump = 0;
          }
        }

        if (player.y < player.row) {
          player.y++;
        } else if (player.y > player.row) {
          player.y--;
        }

      }

      fg_fence_x -= 2;
      if (fg_fence_x < -31) {
        fg_fence_x = 0;
      }
      for (int i = 0; i < 5; i++) {
        sprites.drawPlusMask(i * 32 + fg_fence_x, 14, foregroundfence_plus_mask, 0);
      }

      tickEntities(1);
      if(entities[2].Type == ELEPHANT_ENTITY){//player is behind row 2
        p=1;
        sprites.drawPlusMask(player.x, player.y, lion_plus_mask, player.frame);
      }
      tickEntities(2);
      if(entities[3].Type == ELEPHANT_ENTITY){//player is behind row 3
        p=1;
        sprites.drawPlusMask(player.x, player.y, lion_plus_mask, player.frame);
      }
      tickEntities(3);
      if(p==0){//player is in front of everything
        p=1;
        sprites.drawPlusMask(player.x, player.y, lion_plus_mask, player.frame);
      }


      for (int i = 0; i < 5; i++) {
        sprites.drawPlusMask(i * 32 + fg_fence_x, 59, foregroundfence_plus_mask, 0);
      }

      tickDarts();


      
      //sprites.drawPlusMask(player.x, player.y, lion_plus_mask, player.frame);
      isEntityCollision();
      isDartCollision();
      if(player.multiplier_timer>0){
        player.multiplier_timer--;
        arduboy.setCursor(34,0);
        arduboy.print("(MULTIPLIER)");
      }
      arduboy.setCursor(0,0);
      arduboy.print(player.SCORE);
      break;
    case STATE_GAME_OVER:
      if(gameover_type==TRAMPLED_TEXT){
        arduboy.setCursor(44,16);
        arduboy.print((__FlashStringHelper*)(trampled_text));         
      }else if(gameover_type==KNOCKED_OUT_TEXT){
        arduboy.setCursor(37,16);
        arduboy.print((__FlashStringHelper*)(knocked_out_text));         
      }else if(gameover_type==CAGED_TEXT){
        arduboy.setCursor(52,16);
        arduboy.print((__FlashStringHelper*)(caged_text));         
      }
      if(gameover_text_id==0){
        arduboy.setCursor(0, 32);
        arduboy.print((__FlashStringHelper*)(gameover1_text)); 
      }else if(gameover_text_id==1){
        arduboy.setCursor(0, 32);
        arduboy.print((__FlashStringHelper*)(gameover2_text)); 
      }else if(gameover_text_id==2){
        arduboy.setCursor(0, 32);
        arduboy.print((__FlashStringHelper*)(gameover3_text)); 
      }else if(gameover_text_id==3){
        arduboy.setCursor(0, 32);
        arduboy.print((__FlashStringHelper*)(gameover4_text)); 
      }
      arduboy.setCursor(0,0);
      arduboy.print(player.SCORE);
      if(arduboy.justPressed(B_BUTTON)){
        gameState=STATE_TITLE_SCREEN;
      }
      break;
  }
  if (video_out) {
    Serial.write(arduboy.getBuffer(), 128 * 64 / 8);
  }
  arduboy.display();
}

void isEntityCollision() {
  //set bound box
  Rect playerRect = {.x = (player.x + 4), .y = (player.y + 1), .width = 16, .height = 6};

  //check entities
  for (int8_t i = 0; i < TotalEntities; i++) {
    if (entities[i].Exists == true) {
      Rect entityRect = getEntityRect(i);
      if (arduboy.collide(entityRect, playerRect)) {
        if (entities[i].Type == ELDER_ENTITY) {
          if (player.sliding == false) {
            entities[i].Exists = false;
            sound.tones(SND_EATING);
            if(player.multiplier_timer>0){
              player.SCORE += 2;
            }else{
              player.SCORE += 1;
            }
            entities[i].creation_timer = 0;
          }
        } else if (entities[i].Type == CHILD_ENTITY) {
          if (player.sliding == false) {
            entities[i].Exists = false;
            sound.tones(SND_EATING);
            if(player.multiplier_timer>0){
              player.SCORE += 4;
            }else{
              player.SCORE += 2;
            }
            entities[i].creation_timer = 0;
          }
        } else if (entities[i].Type == ADULT_ENTITY) {
          if (player.sliding == false) {
            entities[i].Exists = false;
            sound.tones(SND_EATING);
            if(player.multiplier_timer>0){
              player.SCORE += 8;
            }else{
              player.SCORE += 4;
            }
            entities[i].creation_timer = 0;
          }
        } else if (entities[i].Type == MONKEY_ENTITY) {
          if (player.sliding == false) {
            entities[i].Exists = false;
            sound.tones(SND_EATING);
            if(player.multiplier_timer>0){
              player.SCORE += 16;
            }else{
              player.SCORE += 8;
            }
            entities[i].creation_timer = 0;
          }
        } else if (entities[i].Type == TRANQ_ZOO_KEEPER_ENTITY) {
          if (player.sliding == false) {
            entities[i].Exists = false;
            sound.tones(SND_EATING);
            if(player.multiplier_timer>0){
              player.SCORE += 32;
            }else{
              player.SCORE += 16;
            };
            entities[i].creation_timer = 0;
          }
        } else if (entities[i].Type == WATER_PUDDLE_ENTITY){ 
          if(player.jump!=1){
            player.slide_timer = 45; //player slides for 2 secs
            player.sliding = true;
          }
        } else if (entities[i].Type == CAGE_ENTITY) {
          sound.tones(SND_GAME_OVER);
          gameover_type = CAGED_TEXT;
          gameover_text_id = random(4);
          if(player.SCORE>high_score_data.score){
            high_score_data.score=player.SCORE;
            Save();
          }
          gameState = STATE_GAME_OVER; //game over
        } else if (entities[i].Type == ELEPHANT_ENTITY) {
          sound.tones(SND_GAME_OVER);
          gameover_type = TRAMPLED_TEXT;
          gameover_text_id = random(4);
          if(player.SCORE>high_score_data.score){
            high_score_data.score=player.SCORE;
            Save();
          }
          gameState = STATE_GAME_OVER; //game over
        } else if (entities[i].Type == HOT_SAUCE_ENTITY) {
          sound.tones(SND_EATING);
          player.multiplier_timer = 900;
          entities[i].Exists=false;
        }
      }
    }
  }
}

void isDartCollision() {
  Rect playerRect = {.x = (player.x + 4), .y = (player.y + 1), .width = 16, .height = 6};

  for (int8_t i = 0; i < TotalDarts; i++) {
    if (darts[i].Exists == true) {
      Rect dartRect = {.x = (darts[i].point.x + 1), .y = (darts[i].point.y + 1), .width = 6, .height = 6};
      if (darts[i].Type == MONKEY_POO) {
        Rect dartRect = {.x = darts[i].point.x, .y = darts[i].point.y, .width = 16, .height = 8};
      } 
      if (arduboy.collide(dartRect, playerRect)) {
        if (darts[i].Type == MONKEY_POO) {
          player.slide_timer = 45; //player slides for 2 secs
          player.sliding = true;

        } else {
          sound.tones(SND_GAME_OVER);
          gameover_type = KNOCKED_OUT_TEXT;
          gameover_text_id = random(4);
          if(player.SCORE>high_score_data.score){
            high_score_data.score=player.SCORE;
            Save();
          }
          gameState = STATE_GAME_OVER; //game over
        }
      }
    }
  }
}

Rect getEntityRect(byte i) {
  if (entities[i].Type == ELDER_ENTITY) {
    return {.x = entities[i].point.x >> 3, .y = entities[i].point.y + 8, .width = 8, .height = 8};
  } else if (entities[i].Type == CHILD_ENTITY) {
    return {.x = entities[i].point.x >> 3, .y = entities[i].point.y + 8, .width = 8, .height = 8};
  } else if (entities[i].Type == ADULT_ENTITY) {
    return {.x = entities[i].point.x >> 3, .y = entities[i].point.y + 8, .width = 8, .height = 8};
  } else if (entities[i].Type == MONKEY_ENTITY) {
    return {.x = entities[i].point.x >> 3, .y = entities[i].point.y, .width = 8, .height = 8};
  } else if (entities[i].Type == TRANQ_ZOO_KEEPER_ENTITY) {
    return {.x = entities[i].point.x >> 3, .y = entities[i].point.y + 8, .width = 8, .height = 8};
  } else if (entities[i].Type == WATER_PUDDLE_ENTITY) {
    return {.x = entities[i].point.x >> 3, .y = entities[i].point.y, .width = 16, .height = 8};
  } else if (entities[i].Type == CAGE_ENTITY) {
    return {.x = entities[i].point.x >> 3, .y = entities[i].point.y + 8, .width = 12, .height = 8};
  } else if (entities[i].Type == ELEPHANT_ENTITY) {
    return {.x = (entities[i].point.x >> 3) + 8, .y = entities[i].point.y + 24, .width = 16, .height = 8};
  } else if (entities[i].Type == HOT_SAUCE_ENTITY) {
    return {.x = (entities[i].point.x >> 3), .y = entities[i].point.y, .width = 8, .height = 8};
  }
}




void createEntity(int8_t type, int16_t X, int8_t id) {
  /*
    MONKEY_ENTITY 8x8
    WATER_PUDDLE_ENTITY 16x8
    MONKEY_POO_ENTITY 16x8
    ELDER_ENTITY 8x16
    CHILD_ENTITY 8x16
    ADULT_ENTITY 8x16
    TRANQ_ZOO_KEEPER_ENTITY 16x16
    CAGE_ENTITY 32x16
    ELEPHANT_ENTITY 32x32
    TRANQ_TRUCK_ENTITY 32x32
    row 0 = 21
    row 1 = 34
    row 2 = 46
    row 3 = 58
  */
  if (!entities[id].Exists) {
    entities[id].point.x = (X << 3);
    if ( type == TRANQ_TRUCK_ENTITY || type == ELEPHANT_ENTITY) {
      if (entities[id].row == 0) {
        entities[id].point.y = 21 - 32;
      } else {
        entities[id].point.y = entities[id].row * 12 + 22 - 32;
      }
      entities[id].width = 32;
    } else if ( type == ELDER_ENTITY || type == CHILD_ENTITY || type == ADULT_ENTITY
                || type == TRANQ_ZOO_KEEPER_ENTITY || type == CAGE_ENTITY) {
      if (entities[id].row == 0) {
        entities[id].point.y = 21 - 16;
      } else {
        entities[id].point.y = entities[id].row * 12 + 22 - 16;
      }
      entities[id].width = 8;
      if (type == CAGE_ENTITY) {
        entities[id].width = 32;
      } else if (type == TRANQ_ZOO_KEEPER_ENTITY) {
        entities[id].width = 16;
      }
    } else if ( type == MONKEY_ENTITY || type == WATER_PUDDLE_ENTITY || type == HOT_SAUCE_ENTITY ) {
      if (entities[id].row == 0) {
        entities[id].point.y = 21 - 8;
      } else {
        entities[id].point.y = entities[id].row * 12 + 22 - 8;
      }
      entities[id].width = 8;
      if (type == WATER_PUDDLE_ENTITY) {
        entities[id].width = 16;
      }
    }
    entities[id].Exists = true;
    entities[id].frame = 0;
    entities[id].Type = type;
    int8_t level = game_timer / 900;
    if (level > MAX_LEVEL) {
      level = MAX_LEVEL;
    }
    entities[id].creation_timer = pgm_read_byte(&odds[id * 6 + level * 24]);
    entities[id].darts = 1;
    if (type == 0) {
      entities[id].Exists = false;
    }
  }
}

bool collide(Point first_point, Point second_point, Rect rect) {
  if (
    (first_point.x <= rect.x && second_point.x <= rect.x) ||
    (first_point.y <= rect.y && second_point.y <= rect.y) ||
    (first_point.x >= rect.x + rect.width && second_point.x >= rect.x + rect.width) ||
    (first_point.y >= rect.y + rect.height && second_point.y >= rect.y + rect.height)
  ) {
    return false;
  }

  float m = (second_point.y - first_point.y) / (second_point.x - first_point.x);

  float y = m * (rect.x - first_point.x) + first_point.y;
  if (y > rect.y && y < rect.y + rect.height) return true;

  y = m * (rect.x + rect.width - first_point.x) + first_point.y;
  if (y > rect.y && y < rect.y + rect.height) return true;

  float x = (rect.y - first_point.y) / m + first_point.x;
  if (x > rect.x && x < rect.x + rect.width) return true;

  x = (rect.y + rect.height - first_point.y) / m + first_point.x;
  if (x > rect.x && x < rect.x + rect.width) return true;

  return false;
}

void tickEntities(int8_t i) {
    if (entities[i].creation_timer > 0) {
      entities[i].creation_timer--;
    }
    if (entities[i].Exists == true) {
      if (entities[i].Type == ELDER_ENTITY) { //1
        //move
        entities[i].point.x -= 12;
        //set frame
        if (arduboy.everyXFrames(15)) {
          entities[i].frame++;
        }
        if (entities[i].frame > 1) {
          entities[i].frame = 0;
        }
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, elder_plus_mask, entities[i].frame);
      } else if (entities[i].Type == CHILD_ENTITY) { //2
        //move
        entities[i].point.x -= 8;
        //set frame
        if (arduboy.everyXFrames(6)) {
          entities[i].frame++;
        }
        if (entities[i].frame > 3) {
          entities[i].frame = 0;
        }
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, child_plus_mask, entities[i].frame);
      } else if (entities[i].Type == ADULT_ENTITY) { //3
        //move
        entities[i].point.x -= 6;
        //set frame
        if (arduboy.everyXFrames(4)) {
          entities[i].frame++;
        }
        if (entities[i].frame > 3) {
          entities[i].frame = 0;
        }
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, adult_plus_mask, entities[i].frame);
      } else if (entities[i].Type == MONKEY_ENTITY) { //4
        //if player is right behind me then spray shit
        Rect behindRect = {.x = ((entities[i].point.x >> 3) - 24), .y = (entities[i].point.y + 1), .width = 16, .height = 6};
        Rect playerRect = {.x = (player.x + 4), .y = (player.y + 1), .width = 16, .height = 6};
        if (arduboy.collide(behindRect, playerRect)) {
          createDart(MONKEY_POO, (entities[i].point.x >> 3) - 16, entities[i].point.y);
        }
        //move
        entities[i].point.x -= 7;
        //set frame
        if (arduboy.everyXFrames(4)) {
          entities[i].frame++;
        }
        if (entities[i].frame > 3) {
          entities[i].frame = 0;
        }
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, monkey_plus_mask, entities[i].frame);
      } else if (entities[i].Type == ELEPHANT_ENTITY) { //5
        //move
        entities[i].point.x -= 17;
        //set frame
        if (arduboy.everyXFrames(15)) {
          entities[i].frame++;
        }
        if (entities[i].frame > 1) {
          entities[i].frame = 0;
        }
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, elephant_plus_mask, entities[i].frame);
      } else if (entities[i].Type == WATER_PUDDLE_ENTITY) { //5
        //move
        entities[i].point.x -= 16;
        //set frame
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, waterpuddle_plus_mask, entities[i].frame);
      } else if (entities[i].Type == TRANQ_TRUCK_ENTITY) { //6
        //if player is in line of sight shoot a tranq dart
        if (entities[i].darts > 0) {
          Point first_point = {.x = ((entities[i].point.x >> 3) + 12) , .y = (entities[i].point.y + 21) };
          Point second_point = {.x = ((entities[i].point.x >> 3) + 12 - 64) , .y = (entities[i].point.y + 21 + 64) };
          arduboy.drawLine(first_point.x-11, first_point.y, second_point.x-11, second_point.y, BLACK);
          Rect playerRect = {.x = (player.x + 4), .y = (player.y + 1), .width = 16, .height = 6};
          if (collide(first_point, second_point, playerRect)) {
            entities[i].darts--;
            createDart(ANGLED_TRANQ_DART, (entities[i].point.x >> 3) + 1, entities[i].point.y + 21);
          }
        }
        //move
        entities[i].point.x -= 4;
        //set frame
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, truck_plus_mask, entities[i].frame);
      } else if (entities[i].Type == CAGE_ENTITY) { //
        //move
        entities[i].point.x -= 16;
        //set frame
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, cage_plus_mask, entities[i].frame);
      } else if (entities[i].Type == HOT_SAUCE_ENTITY) { //
        //move
        entities[i].point.x -= 16;
        //set frame
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, hotsauce_plus_mask, entities[i].frame);
      } else if (entities[i].Type == TRANQ_ZOO_KEEPER_ENTITY) { //
        //if player is on the same row he will shoot 1 tranq dart, he only has 1 dart
        if (entities[i].darts > 0) {
          Point first_point = {.x = 0 , .y = (entities[i].point.y + 9) };
          Point second_point = {.x = (entities[i].point.x>>3) , .y = (entities[i].point.y + 9) };
          arduboy.drawLine(first_point.x, first_point.y, second_point.x, second_point.y, BLACK);
          Rect playerRect = {.x = (player.x + 4), .y = (player.y), .width = 16, .height = 8};
          if (collide(first_point, second_point, playerRect)) {
            entities[i].darts--;
            createDart(TRANQ_DART, (entities[i].point.x >> 3), entities[i].point.y + 6);
          }
        }
        //move
        entities[i].point.x -= 16;
        //set frame
        //draw
        sprites.drawPlusMask((entities[i].point.x >> 3), entities[i].point.y, zookeeper_plus_mask, entities[i].frame);
      }
      if (entities[i].point.x < -(entities[i].width << 3)) {
        entities[i].Exists = false;
      }
    } else {
      //decide if it is time to create another entity
      if (entities[i].creation_timer == 0) {
        //create new entiy
        int8_t level = game_timer / 900;
        if (level > MAX_LEVEL) {
          level = MAX_LEVEL;
        }
        if(hotsauce_timer==0 && i!=0){//create a hotsauce multiplier
          hotsauce_timer=3600;
          createEntity(HOT_SAUCE_ENTITY,128,i);
        }else{
          createEntity(pgm_read_byte(&odds[i * 6 + level * 24 + random(5) + 1]), 128, i);
        }
      }
    }
}

void createDart(int8_t type, int16_t X, int8_t Y) {
  /*
    TRANQ_DART_ENTITY 8x8
    ANGLED_TRANQ_DART_ENTITY 8x8
  */
  for (int8_t i = 0; i < TotalDarts; i++) {
    if (!darts[i].Exists) {
      darts[i].point.x = X;
      darts[i].point.y = Y;
      darts[i].Exists = true;
      darts[i].Type = type;
      break;
    }
  }
}

void tickDarts() {
  for (byte i = 0; i < TotalDarts; i++) {
    if (darts[i].Exists == true) {
      if (darts[i].Type == TRANQ_DART) { //1
        //move
        darts[i].point.x -= 4;
        //draw
        sprites.drawPlusMask(darts[i].point.x, darts[i].point.y, tranqdart_plus_mask, 0);
      } else if (darts[i].Type == ANGLED_TRANQ_DART) { //2
        //move
        darts[i].point.x -= 2;
        darts[i].point.y += 2;
        //draw
        sprites.drawPlusMask(darts[i].point.x, darts[i].point.y, angledtranqdart_plus_mask, 0);
      } else if (darts[i].Type == MONKEY_POO) {
        //move
        darts[i].point.x -= 16;
        //set frame
        //draw
        sprites.drawPlusMask((darts[i].point.x), darts[i].point.y, monkeypoo_plus_mask, 0);
      }
      if (darts[i].point.x < -8) {
        darts[i].Exists = false;
      }
      if (darts[i].point.y > 64) {
        darts[i].Exists = false;
      }
    }
  }
}

bool Load() {
  int startAddress = 984;
  for (unsigned int t=0; t<2; t++){
    *((char*)&high_score_data + t) = EEPROM.read(startAddress + t);
  }
  return true;
}

bool Save() {
  if(SAVE_HIGH_SCORE){
    int startAddress = 984;
    for(uint16_t i=0;i<2;i++){// write the f
      EEPROM.update(startAddress+i, *((char*)&high_score_data + i) );
    }   
    return true;
  }
}

